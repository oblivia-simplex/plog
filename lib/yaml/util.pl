:- module(util, [
                 read_yaml/2,       % +FilePath, -YAML
                 write_yaml/2       % +FilePath, +YAML
                ]).

/** <module> YAML file helper.

@author Hongxin Liang
@license Apache License Version 2.0
*/

:- use_module(library(readutil)).

%% read_yaml(+Source, -YAML) is semidet.
%
% Read YAML file specified by =Source= where =Source= could
% be a file path or an atom representing raw YAML with all the
% comments not being filtered out. Output =YAML= will have
% all the comments been removed.
%
% =Source= could be:
%   * atom(Atom)
%   * file(FilePath)

read_yaml(atom(Atom), YAML) :-
    setup_call_cleanup(open_string(Atom, Stream),
                       read_yaml0(Stream, [], YAML),
                       close(Stream)).

read_yaml(file(FilePath), YAML) :-
    setup_call_cleanup(open(FilePath, read, Stream),
                       read_yaml0(Stream, [], YAML),
                       close(Stream)).

read_yaml0(Stream, YAML0, YAML) :-
    read_line_to_codes(Stream, Codes),
    (   Codes = end_of_file
    ->  YAML = YAML0
    ;   (   \+ first_non_space_code(Codes, 35)
        ->  maplist(char_code, Line, Codes),
            append(YAML0, ['\n'|Line], YAML1),
            read_yaml0(Stream, YAML1, YAML)
        ;   read_yaml0(Stream, YAML0, YAML)
        )
    ).

%% write_yaml(+FilePath, +YAML) is semidet.
%
% Write =YAML= atom to file specified by =FilePath=.

write_yaml(FilePath, YAML) :-
    open(FilePath, write, Stream),
    write(Stream, '# generated by prolog yaml pack\n'),
    write(Stream, YAML),
    close(Stream).

first_non_space_code([], _) :- !, false.
first_non_space_code([H|T], Code) :-
    (   H = 32
    ->  first_non_space_code(T, Code)
    ;   H = Code
    ).
